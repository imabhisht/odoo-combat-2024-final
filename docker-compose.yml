version: '3.9'

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgresx
    hostname: postgresx
    ports:
      - "5433:5432"
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app-network

  graphql-engine:
    image: hasura/graphql-engine:v2.37.0
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgresql://admin:adminadmin@postgresx:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgresql://admin:adminadmin@postgresx:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
    networks:
      - app-network
        
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.37.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - app-network
    

volumes:
  db_data:
  
networks:
  app-network:
    driver: bridge


# initdb:
  #   image: postgres:14-alpine
  #   volumes:
  #     - ./db:/docker-entrypoint-initdb.d
  #     - ./db/run.sh:/docker-entrypoint-initdb.d/run.sh
  #   command: ["sh", "/docker-entrypoint-initdb.d/run.sh"]
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #   networks:
  #     - app-network

  # node-app-1:
  #   image: node:20
  #   container_name: express-app-1
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./:/usr/src/app
  #   ports:
  #     - "3001:3000"  # Use a different host port for each app
  #   command: sh -c "npm install && npx prisma db pull &&  npx prisma generate && npm start"
  #   restart: always
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - initdb

  #   networks:
  #     - app-network

  # node-app-2:
  #   image: node:20
  #   container_name: express-app-2
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./:/usr/src/app
  #   ports:
  #     - "3002:3000"  # Use a different host port for each app
  #   command: sh -c "npm install && npx prisma db pull &&  npx prisma generate && npm start"
  #   restart: always
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - initdb
  #   networks:
  #     - app-network

  # node-app-3:
  #   image: node:20
  #   container_name: express-app-3
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./:/usr/src/app
  #   ports:
  #     - "3003:3000"  # Use a different host port for each app
  #   command: sh -c "npm install && npx prisma db pull &&  npx prisma generate && npm start"
  #   restart: always
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - initdb
  #   networks:
  #     - app-network

  # load-balancer:
  #   image: nginx:latest  
  #   container_name: load-balancer
  #   ports:
  #     - "3000:80"  
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf  
  #   depends_on:
  #     - node-app-1
  #     - node-app-2
  #     - node-app-3
  #     - postgres

  #   networks:
  #     - app-network

